name: Build and deploy FINBOT to non prod Perpetual AKS

on:
#  push:
#    branches: 
#      - dev
  workflow_dispatch: 

jobs:
  buildImage:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log in to registry
        uses: docker/login-action@v1
        with:
          registry: ${{ vars.HARBOR_HOST }}
          username: prod-harbor-robot@${{ vars.HARBOR_USER_NAME }}
          password: ${{ secrets.HARBOR_PUSH_TOKEN }}

      - name: docker build
        run: | 
          docker build -t '${{ vars.CONTAINER_NAME }}:${{github.sha}}' -f FastAPI/Dockerfile FastAPI --no-cache

      - name: tag docker image
        run: docker image tag '${{ vars.CONTAINER_NAME }}:${{ github.sha }}' '${{ vars.HARBOR_HOST }}/${{ vars.HARBOR_PROJECT_NAME }}/${{ vars.CONTAINER_NAME }}:${{ github.sha }}' 

      - name: push docker image
        run: docker push '${{ vars.HARBOR_HOST }}/${{ vars.HARBOR_PROJECT_NAME }}/${{ vars.CONTAINER_NAME }}:${{ github.sha }}'


  Deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [buildImage]
    environment: dev
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
  
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        id: install

      - name: Import secrets
        uses: hashicorp/vault-action@v2.4.3
        id: secrets
        with:
          url: https://vault.maersk-digital.net

          tlsSkipVerify: false
          exportEnv: false
          method: approle
          roleId:  ${{ secrets.HASHICORP_VAULT_ROLE_ID }}
          secretId: ${{ secrets.HASHICORP_VAULT_ROLE_SECRET_ID }}
          secrets: |
            ${{ vars.HASHICORP_VAULT_PREFIX }}/data/readable/kubernetes/${{ vars.K8S_CLUSTER_NAME }}/server server;
            ${{ vars.HASHICORP_VAULT_PREFIX }}/data/readable/kubernetes/${{ vars.K8S_CLUSTER_NAME  }}/ci-token-secret ci-token-secret | CI_TOKEN_SECRET;


      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v3
        id: setcontext
        with:
          method: service-account
          k8s-url: ${{ steps.secrets.outputs.server }}
          k8s-secret: ${{ steps.secrets.outputs.CI_TOKEN_SECRET }}

      - name: Create Secret if it does not exist
        run: |
          if ! kubectl get secret finbot-dev-openai-secret --namespace=${{vars.NAMESPACE}}; then
            kubectl create secret generic finbot-dev-openai-secret \
              --from-literal=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              --from-literal=OPENAI_API_BASE=${{ secrets.OPENAI_API_BASE }} \
              --from-literal=OPENAI_API_TYPE=${{ secrets.OPENAI_API_TYPE }} \
              --from-literal=OPENAI_API_VERSION=${{ secrets.OPENAI_API_VERSION }} \
              --namespace=${{vars.NAMESPACE}}
          else
            echo "Secret finbot-dev-openai-secret already exists"
          fi 

          if ! kubectl get secret finbot-dev-pg-secret --namespace=${{vars.NAMESPACE}}; then
            kubectl create secret generic finbot-dev-pg-secret \
              --from-literal=PG_HOST_NAME=${{ secrets.PG_HOST_NAME }} \
              --from-literal=PG_DATABASE_NAME=${{ secrets.PG_DATABASE_NAME }} \
              --from-literal=PG_DATABASE_UNAME=${{ secrets.PG_DATABASE_UNAME }} \
              --from-literal=PG_DATABASE_PWD=${{ secrets.PG_DATABASE_PWD }} \
              --from-literal=SQL_SCHEMA_NAME=${{ secrets.SQL_SCHEMA_NAME }} \
              --from-literal=SQL_DWH_TBL=${{ secrets.SQL_DWH_TBL }} \
              --namespace=${{vars.NAMESPACE}}

          else
            echo "Secret finbot-dev-pg-secret already exists"
          fi 
          
      - name: Deploys application
        uses: Azure/k8s-deploy@v3
        with:
          namespace: ${{vars.NAMESPACE}}
          action: deploy
          manifests: ${{ vars.DEPLOYMENT_MANIFEST_PATH }}
          images: |
            ${{ vars.HARBOR_HOST }}/${{ vars.HARBOR_PROJECT_NAME }}/${{ vars.CONTAINER_NAME }}:${{ github.sha }}
